name: Build Images
on:
  push:
    paths:
    - 'versions.json'
  workflow_dispatch:
    inputs:
      php:
        description: "PHP Version"
        required: true
        type: choice
        default: '8.4'
        options:
        - '8.2'
        - '8.3'
        - '8.4'
      ext:
        description: "Extension name"
        required: true
        type: choice
        options:
        - 'grpc'
        - 'opentelemetry'
        - 'mongodb'
        - 'redis'
        - 'igbinary'
        - 'openswoole'
      ver:
        description: "Extension version"
        required: true
        type: string
      os:
        description: "Operating System"
        required: true
        type: choice
        options:
        - 'alpine-3.18'
        - 'alpine-3.19'
        - 'alpine-3.21'
        - 'ubuntu-20.04'
        - 'ubuntu-22.04'
        - 'ubuntu-24.04'

jobs:
  matrix:
    name: Prepare Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.v.outputs.matrix }}
    steps:
    - uses: actions/checkout@v4

    - name: Prepare missed.jsonl
      id: v
      run: |
        name='${{ github.event_name }}'
        if [ "$name" == "workflow_dispatch" ]; then
          printf '' > missed.jsonl
          printf '{"php":"%s","ext":"%s","ver":"%s","os":"%s"}\n' \
            "${{ github.event.inputs.php }}" \
            "${{ github.event.inputs.ext }}" \
            "${{ github.event.inputs.ver }}" \
            "${{ github.event.inputs.os }}" \
            >> missed.jsonl
        else
          bash scripts/find-missed.sh
        fi

        echo "matrix=$(jq -cn '.include = [inputs]' missed.jsonl)" | tee -a $GITHUB_OUTPUT

  build:
    name: Prepare Images
    runs-on: ubuntu-latest
    needs: matrix
    permissions:
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
    - name: Seperate OS version
      id: v
      run: |
        echo "os_name=$(echo ${{ matrix.os }} | cut -d '-' -f1)" | tee -a $GITHUB_OUTPUT
        echo "os_version=$(echo ${{ matrix.os }} | cut -d '-' -f2-)" | tee -a $GITHUB_OUTPUT
        echo "tag=${{ matrix.php }}-${{ matrix.os }}-${{ matrix.ext }}-${{ matrix.ver }}" | tee -a $GITHUB_OUTPUT

    - name: Set up buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Load cache
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ matrix.php }}-${{ matrix.os }}

    - name: Log in to Docker
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        # ${{ vars.DOCKER_HUB_REPO }}
        images: ghcr.io/${{ github.repository }}
        tags: ${{ steps.v.outputs.tag }}
        labels: |
          org.opencontainers.image.title="Pre-compiled ${{ matrix.ext }} extension for PHP."
          org.opencontainers.image.description="${{ matrix.ext }} extensions for PHP${{ matrix.php }} in ${{ matrix.os }}."
          org.opencontainers.image.version="${{ matrix.ver }}"

    - uses: actions/checkout@v4
    - name: Build
      uses: docker/build-push-action@v6
      with:
        file: extensions/${{ matrix.ext }}/Dockerfile.${{ steps.v.outputs.os_name }}
        context: extensions/${{ matrix.ext }}/.
        build-args: |
          OS_VERSION=${{ steps.v.outputs.os_version }}
          PHP_VERSION=${{ matrix.php }}
          VERSION=${{ matrix.ver }}
        tags: ${{ steps.meta.outputs.tags }},${{ vars.DOCKER_HUB_REPO }}:${{ steps.v.outputs.tag }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: "linux/amd64,linux/arm64"
        push: true
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        cache-from: type=local,src=/tmp/.buildx-cache

    - name: Replace cache  # temp fix for https://github.com/docker/build-push-action/issues/252 & https://github.com/moby/buildkit/issues/1896.
      run: rm -rf /tmp/.buildx-cache && mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  record:
    name: Record history
    runs-on: ubuntu-latest
    needs:
    - build
    - matrix
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: record
        run: |
          echo '${{ needs.matrix.outputs.matrix }}' | jq -cr '.include[]' | while read -r item; do
            mkdir -p "history/$(echo "$item" | jq -r '.php + "/" + .ext + "/" + .ver')"
            jq -cn \
              --arg by evan361425 \
              --arg at "$(date -u '+%Y-%m-%dT%TZ')" \
              '{"createdAt":$at,"triggerBy":$by}' \
              > "history/$(echo "$item" | jq -r '.php + "/" + .ext + "/" + .ver + "/" + .os').json"
          done
          git pull
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: record history'
          file_pattern: "history/*.json"
      
